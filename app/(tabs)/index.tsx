import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Text, TouchableOpacity, Alert } from 'react-native';
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
  withRepeat,
  withSequence,
} from 'react-native-reanimated';
import { useRouter } from 'expo-router';

const funFacts = [
  '–í –ë—ä–ª–≥–∞—Ä–∏—è –∏–º–∞ –Ω–∞–¥ 19 000 –∫–º –ø—ä—Ç–∏—â–∞.',
  '–ü—ä—Ç–∏—â–∞—Ç–∞ –≤ –†–æ–¥–æ–ø–∏—Ç–µ —Å–∞ –µ–¥–Ω–∏ –æ—Ç –Ω–∞–π-–∂–∏–≤–æ–ø–∏—Å–Ω–∏—Ç–µ.',
  '–ü—Ä–µ–∑ –∑–∏–º–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å–µ –ø–æ—á–∏—Å—Ç–≤–∞—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.',
  '–í –°–æ—Ñ–∏—è —Ç—Ä–∞—Ñ–∏–∫—ä—Ç –¥–æ—Å—Ç–∏–≥–∞ –¥–æ 70% –æ—Ç –ø–∏–∫–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–µ.',
  '–ë—ä–ª–≥–∞—Ä–∏—è –ø–ª–∞–Ω–∏—Ä–∞ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ –¥–æ 2030 –≥.',
  '–ü—ä—Ç—è—Ç –æ—Ç –°–æ—Ñ–∏—è –¥–æ –ë—É—Ä–≥–∞—Å –µ –æ–∫–æ–ª–æ 390 –∫–º.',
  '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∞ ‚Äû–°—Ç—Ä—É–º–∞‚Äú –µ –µ–¥–Ω–∞ –æ—Ç –Ω–∞–π-–º–æ–¥–µ—Ä–Ω–∏—Ç–µ —É –Ω–∞—Å.',
  '–ü—ä—Ç–Ω–∞—Ç–∞ –ø–æ–ª–∏—Ü–∏—è —Å–ª–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ —Ç—Ä–∞—Å–µ—Ç–∞.',
  '–í –°–æ—Ñ–∏—è —Ä–∞–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.',
  '–ü—Ä–µ–∑ –ª—è—Ç–æ—Ç–æ –º–Ω–æ–≥–æ –±—ä–ª–≥–∞—Ä–∏ –ø—ä—Ç—É–≤–∞—Ç –∫—ä–º –ß–µ—Ä–Ω–æ–º–æ—Ä–∏–µ—Ç–æ.',
];

export default function HomeScreen() {
  const router = useRouter();

  // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –±—É—Ç–æ–Ω–∞ "–í–ª–µ–∑ –≤ –∫–æ–ª–∞—Ç–∞"
  const scale = useSharedValue(1);

  // –ü—É–ª—Å–∏—Ä–∞—â–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
  const pulse = useSharedValue(1);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      transform: [{ scale: scale.value }],
    };
  });

  const pulseStyle = useAnimatedStyle(() => {
    return {
      transform: [{ scale: pulse.value }],
    };
  });

  useEffect(() => {
    pulse.value = withRepeat(
      withSequence(
        withTiming(1.05, { duration: 700 }),
        withTiming(1, { duration: 700 })
      ),
      -1,
      true
    );
  }, []);

  const onPressIn = () => {
    scale.value = withTiming(0.9, { duration: 100, easing: Easing.out(Easing.ease) });
  };

  const onPressOut = () => {
    scale.value = withTiming(1, { duration: 100, easing: Easing.out(Easing.ease) });
  };

  // –ü–æ–∫–∞–∑–≤–∞ —Å–ª—É—á–∞–π–Ω–∞ —Ñ–∞–∫—Ç–∞
  const [fact, setFact] = useState('');

  const showRandomFact = () => {
    const randomIndex = Math.floor(Math.random() * funFacts.length);
    setFact(funFacts[randomIndex]);
    Alert.alert('–õ—é–±–æ–ø–∏—Ç–µ–Ω —Ñ–∞–∫—Ç', funFacts[randomIndex]);
  };

  // –¢–µ–∫—É—â–∞ –¥–∞—Ç–∞ –∏ —á–∞—Å
  const [currentTime, setCurrentTime] = useState('');

  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      const formatted = now.toLocaleString('bg-BG', {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit',
      });
      setCurrentTime(formatted);
    };
    updateTime();
    const interval = setInterval(updateTime, 60000); // —ä–ø–¥–µ–π—Ç –≤—Å—è–∫–∞ –º–∏–Ω—É—Ç–∞
    return () => clearInterval(interval);
  }, []);

  return (
    <View style={styles.container}>
      <Animated.Text style={[styles.title, pulseStyle]}>
        –î–æ–±—Ä–µ –¥–æ—à—ä–ª –≤ AutoWaze
      </Animated.Text>
      <Text style={styles.subtitle}>–ò–∑–±–µ—Ä–∏ –∫—ä–¥–µ –¥–∞ —Ç—Ä—ä–≥–Ω–µ—à –∏ –∫—ä–¥–µ –¥–∞ –æ—Ç–∏–¥–µ—à</Text>
      <Text style={styles.time}>–î–Ω–µ—Å –µ {currentTime}</Text>

      <Animated.View style={[styles.carButtonContainer, animatedStyle]}>
        <TouchableOpacity
          onPress={() => alert('–í–ª—è–∑–æ—Ö—Ç–µ –≤ –∫–æ–ª–∞—Ç–∞! üöó')}
          onPressIn={onPressIn}
          onPressOut={onPressOut}
          style={styles.carButton}
          activeOpacity={0.8}
        >
          <Text style={styles.carButtonText}>üöó –í–ª–µ–∑ –≤ –∫–æ–ª–∞—Ç–∞</Text>
        </TouchableOpacity>
      </Animated.View>

      <TouchableOpacity
        style={styles.navigateButton}
        onPress={() => router.push('/(tabs)/navigate')}
      >
        <Text style={styles.navigateButtonText}>–ö—ä–¥–µ –¥–∞ —Ç—Ä—ä–≥–≤–∞–º–µ?</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.factButton} onPress={showRandomFact}>
        <Text style={styles.factButtonText}>üéâ –ü–æ–∫–∞–∂–∏ –ª—é–±–æ–ø–∏—Ç–µ–Ω —Ñ–∞–∫—Ç –∑–∞ –ø—ä—Ç–∏—â–∞—Ç–∞</Text>
      </TouchableOpacity>

      {fact ? <Text style={styles.factText}>{fact}</Text> : null}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0A84FF',
    paddingHorizontal: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 12,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 18,
    color: '#d0e6ff',
    marginBottom: 4,
    textAlign: 'center',
  },
  time: {
    fontSize: 14,
    color: '#b0d4ff',
    marginBottom: 24,
  },
  carButtonContainer: {
    marginBottom: 30,
  },
  carButton: {
    backgroundColor: '#fff',
    paddingVertical: 16,
    paddingHorizontal: 40,
    borderRadius: 40,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 10,
    elevation: 5,
  },
  carButtonText: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#0A84FF',
  },
  navigateButton: {
    borderColor: '#fff',
    borderWidth: 2,
    paddingVertical: 14,
    paddingHorizontal: 30,
    borderRadius: 40,
    marginBottom: 20,
  },
  navigateButtonText: {
    color: '#fff',
    fontSize: 20,
    fontWeight: '600',
  },
  factButton: {
    backgroundColor: '#2980b9',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 30,
  },
  factButtonText: {
    color: 'white',
    fontSize: 16,
  },
  factText: {
    marginTop: 16,
    fontSize: 14,
    color: '#cce6ff',
    textAlign: 'center',
    paddingHorizontal: 12,
  },
});
